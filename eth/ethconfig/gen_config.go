// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package ethconfig

import (
	"math/big"
	"time"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/consensus/ethash"
	"github.com/ethereum/go-ethereum/core"
	"github.com/ethereum/go-ethereum/eth/downloader"
	"github.com/ethereum/go-ethereum/eth/gasprice"
	"github.com/ethereum/go-ethereum/params"
)

// MarshalTOML marshals as TOML.
func (c Config) MarshalTOML() (interface{}, error) {
	type Config struct {
		Genesis                         *core.Genesis `toml:",omitempty"`
		NetworkId                       uint64
		SyncMode                        downloader.SyncMode
		EthDiscoveryURLs                []string
		SnapDiscoveryURLs               []string
		NoPruning                       bool
		NoPrefetch                      bool
		TxLookupLimit                   uint64                 `toml:",omitempty"`
		PeerRequiredBlocks              map[uint64]common.Hash `toml:"-"`
		SyncFromCheckpoint              bool                   `toml:",omitempty"`
		SkipBcVersionCheck              bool                   `toml:"-"`
		DatabaseHandles                 int                    `toml:"-"`
		DatabaseCache                   int
		DatabaseFreezer                 string
		TrieCleanCache                  int
		TrieCleanCacheJournal           string        `toml:",omitempty"`
		TrieCleanCacheRejournal         time.Duration `toml:",omitempty"`
		TrieDirtyCache                  int
		TrieTimeout                     time.Duration
		SnapshotCache                   int
		Preimages                       bool
		Ethash                          ethash.Config
		TxPool                          core.TxPoolConfig
		GPO                             gasprice.Config
		EnablePreimageRecording         bool
		DocRoot                         string `toml:"-"`
		RPCGasCap                       uint64
		RPCEVMTimeout                   time.Duration
		RPCTxFeeCap                     float64
		Checkpoint                      *params.TrustedCheckpoint      `toml:",omitempty"`
		CheckpointOracle                *params.CheckpointOracleConfig `toml:",omitempty"`
		OverrideArrowGlacier            *big.Int                       `toml:",omitempty"`
		OverrideTerminalTotalDifficulty *big.Int                       `toml:",omitempty"`
	}
	var enc Config
	enc.Genesis = c.Genesis
	enc.NetworkId = c.NetworkId
	enc.SyncMode = c.SyncMode
	enc.EthDiscoveryURLs = c.EthDiscoveryURLs
	enc.SnapDiscoveryURLs = c.SnapDiscoveryURLs
	enc.NoPruning = c.NoPruning
	enc.NoPrefetch = c.NoPrefetch
	enc.TxLookupLimit = c.TxLookupLimit
	enc.PeerRequiredBlocks = c.PeerRequiredBlocks
	enc.SyncFromCheckpoint = c.SyncFromCheckpoint
	enc.SkipBcVersionCheck = c.SkipBcVersionCheck
	enc.DatabaseHandles = c.DatabaseHandles
	enc.DatabaseCache = c.DatabaseCache
	enc.DatabaseFreezer = c.DatabaseFreezer
	enc.TrieCleanCache = c.TrieCleanCache
	enc.TrieCleanCacheJournal = c.TrieCleanCacheJournal
	enc.TrieCleanCacheRejournal = c.TrieCleanCacheRejournal
	enc.TrieDirtyCache = c.TrieDirtyCache
	enc.TrieTimeout = c.TrieTimeout
	enc.SnapshotCache = c.SnapshotCache
	enc.Preimages = c.Preimages
	enc.Ethash = c.Ethash
	enc.TxPool = c.TxPool
	enc.GPO = c.GPO
	enc.EnablePreimageRecording = c.EnablePreimageRecording
	enc.DocRoot = c.DocRoot
	enc.RPCGasCap = c.RPCGasCap
	enc.RPCEVMTimeout = c.RPCEVMTimeout
	enc.RPCTxFeeCap = c.RPCTxFeeCap
	enc.Checkpoint = c.Checkpoint
	enc.CheckpointOracle = c.CheckpointOracle
	enc.OverrideArrowGlacier = c.OverrideArrowGlacier
	enc.OverrideTerminalTotalDifficulty = c.OverrideTerminalTotalDifficulty
	return &enc, nil
}

// UnmarshalTOML unmarshals from TOML.
func (c *Config) UnmarshalTOML(unmarshal func(interface{}) error) error {
	type Config struct {
		Genesis                         *core.Genesis `toml:",omitempty"`
		NetworkId                       *uint64
		SyncMode                        *downloader.SyncMode
		EthDiscoveryURLs                []string
		SnapDiscoveryURLs               []string
		NoPruning                       *bool
		NoPrefetch                      *bool
		TxLookupLimit                   *uint64                `toml:",omitempty"`
		PeerRequiredBlocks              map[uint64]common.Hash `toml:"-"`
		SyncFromCheckpoint              *bool                  `toml:",omitempty"`
		SkipBcVersionCheck              *bool                  `toml:"-"`
		DatabaseHandles                 *int                   `toml:"-"`
		DatabaseCache                   *int
		DatabaseFreezer                 *string
		TrieCleanCache                  *int
		TrieCleanCacheJournal           *string        `toml:",omitempty"`
		TrieCleanCacheRejournal         *time.Duration `toml:",omitempty"`
		TrieDirtyCache                  *int
		TrieTimeout                     *time.Duration
		SnapshotCache                   *int
		Preimages                       *bool
		Ethash                          *ethash.Config
		TxPool                          *core.TxPoolConfig
		GPO                             *gasprice.Config
		EnablePreimageRecording         *bool
		DocRoot                         *string `toml:"-"`
		RPCGasCap                       *uint64
		RPCEVMTimeout                   *time.Duration
		RPCTxFeeCap                     *float64
		Checkpoint                      *params.TrustedCheckpoint      `toml:",omitempty"`
		CheckpointOracle                *params.CheckpointOracleConfig `toml:",omitempty"`
		OverrideArrowGlacier            *big.Int                       `toml:",omitempty"`
		OverrideTerminalTotalDifficulty *big.Int                       `toml:",omitempty"`
	}
	var dec Config
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.Genesis != nil {
		c.Genesis = dec.Genesis
	}
	if dec.NetworkId != nil {
		c.NetworkId = *dec.NetworkId
	}
	if dec.SyncMode != nil {
		c.SyncMode = *dec.SyncMode
	}
	if dec.EthDiscoveryURLs != nil {
		c.EthDiscoveryURLs = dec.EthDiscoveryURLs
	}
	if dec.SnapDiscoveryURLs != nil {
		c.SnapDiscoveryURLs = dec.SnapDiscoveryURLs
	}
	if dec.NoPruning != nil {
		c.NoPruning = *dec.NoPruning
	}
	if dec.NoPrefetch != nil {
		c.NoPrefetch = *dec.NoPrefetch
	}
	if dec.TxLookupLimit != nil {
		c.TxLookupLimit = *dec.TxLookupLimit
	}
	if dec.PeerRequiredBlocks != nil {
		c.PeerRequiredBlocks = dec.PeerRequiredBlocks
	}
	if dec.SkipBcVersionCheck != nil {
		c.SkipBcVersionCheck = *dec.SkipBcVersionCheck
	}
	if dec.DatabaseHandles != nil {
		c.DatabaseHandles = *dec.DatabaseHandles
	}
	if dec.DatabaseCache != nil {
		c.DatabaseCache = *dec.DatabaseCache
	}
	if dec.DatabaseFreezer != nil {
		c.DatabaseFreezer = *dec.DatabaseFreezer
	}
	if dec.TrieCleanCache != nil {
		c.TrieCleanCache = *dec.TrieCleanCache
	}
	if dec.TrieCleanCacheJournal != nil {
		c.TrieCleanCacheJournal = *dec.TrieCleanCacheJournal
	}
	if dec.TrieCleanCacheRejournal != nil {
		c.TrieCleanCacheRejournal = *dec.TrieCleanCacheRejournal
	}
	if dec.TrieDirtyCache != nil {
		c.TrieDirtyCache = *dec.TrieDirtyCache
	}
	if dec.TrieTimeout != nil {
		c.TrieTimeout = *dec.TrieTimeout
	}
	if dec.SnapshotCache != nil {
		c.SnapshotCache = *dec.SnapshotCache
	}
	if dec.Preimages != nil {
		c.Preimages = *dec.Preimages
	}
	if dec.Ethash != nil {
		c.Ethash = *dec.Ethash
	}
	if dec.TxPool != nil {
		c.TxPool = *dec.TxPool
	}
	if dec.GPO != nil {
		c.GPO = *dec.GPO
	}
	if dec.EnablePreimageRecording != nil {
		c.EnablePreimageRecording = *dec.EnablePreimageRecording
	}
	if dec.DocRoot != nil {
		c.DocRoot = *dec.DocRoot
	}
	if dec.RPCGasCap != nil {
		c.RPCGasCap = *dec.RPCGasCap
	}
	if dec.RPCEVMTimeout != nil {
		c.RPCEVMTimeout = *dec.RPCEVMTimeout
	}
	if dec.RPCTxFeeCap != nil {
		c.RPCTxFeeCap = *dec.RPCTxFeeCap
	}
	if dec.Checkpoint != nil {
		c.Checkpoint = dec.Checkpoint
	}
	if dec.CheckpointOracle != nil {
		c.CheckpointOracle = dec.CheckpointOracle
	}
	if dec.OverrideArrowGlacier != nil {
		c.OverrideArrowGlacier = dec.OverrideArrowGlacier
	}
	if dec.OverrideTerminalTotalDifficulty != nil {
		c.OverrideTerminalTotalDifficulty = dec.OverrideTerminalTotalDifficulty
	}
	return nil
}
